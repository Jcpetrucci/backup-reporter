#!/bin/bash
# Create: 2014-07-24 John C. Petrucci( http://johncpetrucci.com )

# SECTION: Script global variables
me=$(basename $0)
verbosity=2 # Start counting at 2 so that any increase to this will result in a minimum of file descriptor 3.
maxverbosity=3 # The highest verbosity we use / allow to be displayed.
colorsonred=$(tput setaf 1)
colorsongreen=$(tput setaf 2)
colorsoff=$(tput sgr0)

# SECTION: Dependencies
dependencies=("echo" "bash" "find" "sed" "cut" "grep" "tput")
for dependency in "${dependencies[@]}"; do
	which $dependency &> /dev/null || { printf "%s %s\n" "ERROR: Required dependency is missing:" "$dependency" >&2; exit 1; }
done

# SECTION: Help function
function_Help() {
	cat <<-EOH >&2
	Usage: $me [OPTION]... [DIR]
	Description text. ###WIP
	Example: $me -s <ORGANIZATION>
	Options:
	   -a                         Scan all organizations for recent backups
	   -n                         Add new monitored backup
	   -s <ORGANIZATION>          Scan <ORGANIZATION> for recent backups
	   -v                         Verbose mode

	With no DIR, /etc/$me.d/ is used.
	EOH
	###printf '%5s\t\t%s' "-s" "Scan"
}

# SECTION: Argument parsing
while getopts ":hans:v" option; do
	case $option in
		h) function_Help; exit 0;;
		a) main="function_ScanAll";;
		n) main="function_Create";;
		s) main="function_Scan ${OPTARG}";;
		v) (( verbosity=verbosity+1 ));;
		*) function_Help; exit 1;;
	esac
done
shift $((OPTIND-1))

for v in $(seq 3 $verbosity) # Start counting from 3 since 1 and 2 are standards (stdout/stderr).
do
	(( "$v" <= "$maxverbosity" )) && eval exec "$v>&2"  # Don't change anything higher than the maximum verbosity allowed.
done

for v in $(seq $(( verbosity+1 )) $maxverbosity ) # From the verbosity level one higher than requested, through the maximum;
do
	(( "$v" > "2" )) && eval exec "$v>/dev/null" # Redirect these to bitbucket, provided that they don't match stdout and stderr.
done

printf "%s %d\n" "Verbosity level set to:" "$verbosity" >&3

configurationpath="${1-/etc/$me.d}"
printf "%s %s\n" "Using configuration path:" "$configurationpath" >&3

if [[ ! -d "$configurationpath" ]]; then # If is not directory, error and quit
	printf "%s %s\n" "Configuration path not found:" "$configurationpath" >&2
	exit 1;
fi

# SECTION: Scan function
function_Scan() {
	if [[ "$#" == 1 ]]; then # Targetted mode (organization specified)
		for organization in "$*"; do
			printf "%s %s\n" "Scanning organization" "$organization" >&3
		done
	else # Scan all organizations
		printf "%s\n" "Scanning all organizations" >&3
	fi
	
	# For each device in organization:
	for deviceconfiguration in $(find "${configurationpath}/${organization}" -name ".config" -print || printf "%s\n" "Unable to locate organization $organization." >&2); do
		devicename="$(sed -re 's|.*/(.*)/.config|\1|' <<<"$deviceconfiguration")"
		deviceorganization="$(sed -re 's|.*/(.*)/.*/.config|\1|' <<<"$deviceconfiguration")"
		printf "%s '%s' of '%s'\n" "Found backup profile for" "$devicename" "$deviceorganization" >&3 

		for configurationvariable in backuppath backupregex backupfrequency; do # Required configuration variables.  Failure to set one of these is hard stop.
			local variable="$(grep $configurationvariable "$deviceconfiguration" | cut -d'=' -f2)"
			(( ${#variable} > 0 )) || { printf "[%s%s%s] Backup profile is missing required option: %s (%s)\n" "$colorsonred" " ERROR  " "$colorsoff" "$configurationvariable" "$deviceconfiguration" >&2; continue 2; }
			export $configurationvariable="$variable"
		done
		printf "%s\n" "Configuration has all needed options." >&3

		for configurationvariable in backupminimumsize backupsyslog backupemail; do # Optional configuration variables.  
			local variable="$(grep $configurationvariable "$deviceconfiguration" | cut -d'=' -f2)"
			export $configurationvariable="$variable"
		done

		printf "%s -- %s\n" "Preparing to run cmd" "find \"$backuppath\" -type f -regex \"$backupregex\" -mtime -${backupfrequency} -size +${backupminimumsize:-0M} -printf '#' -quit" >&3
		if [[ ! -n "$(find "$backuppath" -type f -regex "$backupregex" -mtime -${backupfrequency} -size +${backupminimumsize:-0M} -printf '#' -quit 2>/dev/null)" ]]; then
			printf "[%s%s%s] No backup files match criteria defined for: %s of %s.\n" "$colorsonred" "  FAIL  " "$colorsoff" "$devicename" "$deviceorganization"
			[[ -z "$backupsyslog" ]] || logger -t "$me" -p emerg "No backup files match criteria defined for: $devicename of $deviceorganization"
			[[ -z "$backupemail" ]] || echo MAIL SOON ###
		else
			printf "[%s%s%s] Found valid backup for: %s of %s.\n" "$colorsongreen" "   OK   " "$colorsoff" "$devicename" "$deviceorganization"
		fi
		unset backuppath backupregex backupfrequency backupminimumsize devicename deviceorganization backupsyslog backupemail
		
	done
}

# SECTION: Create function
function_Create() {
	clear
	printf "%s\n\n" "Choose one of these existing organizations or create a new one:"
	local i=0 # Counter for organizations detected in configuration directory.
	existingorganizations=($(find "${configurationpath}/" -mindepth 1 -maxdepth 1 -type d -print))
	for (( i = 0; i < ${#existingorganizations[@]}; i++ )); do
		printf "%2d) %s\n" "$(( i + 1 ))" "${existingorganizations[$i]##*/}"
	done
		printf "%2d) %s\n" "$(( i + 1 ))" "Create a new organization"
	unset i
	
	read -p "Organization # or name: "
	[[ -n $REPLY ]] || { printf "%s\n" "No organization specified."; exit 1; }

	local selectedorganization="$REPLY"
	grep -Eq "[^0-9]" <<< "$REPLY" || selectedorganization="${existingorganizations[$(( REPLY - 1 ))]}" # If REPLY is numeric then actual reply is the offset into the array.
	selectedorganization="${selectedorganization##*/}"

	if (( $REPLY > ${#existingorganizations[@]} )); then
		while :; do
			read -p "Enter new organization's name: "
			selectedorganization="$REPLY" # If REPLY is numeric and higher than highest index then create new.
			printf "%s '%s' ... " "You entered:" "$selectedorganization"
			read -p "is this okay? [y/N/q]: "
			case $REPLY in
				[yY]) break;;
				[qQ]) exit 1;;
			esac
		done
		mkdir -vp "${configurationpath}/${selectedorganization}" >&3
	fi
	
	### Everything needs sanitized.

	cd "${configurationpath}/${selectedorganization}" 2>&3 || { printf "%s\n" "Error- cannot cd to organization directory.  Please create it first."; exit 1; }
	printf "%s %s\n" "Creating new device configuration for:" "$selectedorganization"
	printf "%s\n" "What is the device name?  e.g. Firewall-External-1"
	read -p "? " devicename
	local deviceconfiguration="${configurationpath}/${selectedorganization}/${devicename}/.config"
	mkdir -v "${configurationpath}/${selectedorganization}/${devicename}" >&3 2>&3 
	cd "${configurationpath}/${selectedorganization}/${devicename}" >&3 2>&3 || { printf "%s\n" "Error- cannot enter deviceconfig path.  Check permissions."; exit 1; }
	printf "%s\n" "Where are the backups stored?"
	read -ep "? " -i "/customer_backups/" backuppath ### Tweak this for tab completion of existing directories
	printf "%s\n" "What regex defines the naming convention of backup files?  If unknown enter .*"
	read -p "? " backupregex
	printf "%s\n" "How often (in days) should we receive a new backup?"
	read -p "? " backupfrequency
	printf "%s\n" "Enter an OPTIONAL minimum size for a backup to be considered valid (with trailing 'M' for Mbytes)  e.g. 150M"
	read -p "? " backupminimumsize
	printf "%s\n" "Generate syslog alerts when we fail to find backups for this device? [y/N]"
	read -p "? " backupsyslog
	printf "%s\n" "Generate e-mail alerts when we fail to find backups for this device? [y/N]"
	read -p "? " backupemail

	> $deviceconfiguration || { printf "%s\n" "Error- cannot create deviceconfig.  Check permissions."; exit 1; }
	[[ -n $backuppath ]] && printf "%s=%s\n" "backuppath" "$backuppath" >> $deviceconfiguration
	[[ -n $backupregex ]] && printf "%s=%s\n" "backupregex" "$backupregex" >> $deviceconfiguration
	[[ -n $backupfrequency ]] && printf "%s=%s\n" "backupfrequency" "$backupfrequency" >> $deviceconfiguration
	[[ -n $backupminimumsize ]] && printf "%s=%s\n" "backupminimumsize" "$backupminimumsize" >> $deviceconfiguration
	[[ -n $backupsyslog ]] && printf "%s=%s\n" "backupsyslog" "1" >> $deviceconfiguration
	[[ -n $backupemail ]] && printf "%s=%s\n" "backupemail" "1" >> $deviceconfiguration

}

# SECTION: Main program body
case "${main%% *}" in 
	function_Scan) 		function_Scan "${main#* }";;
	function_ScanAll) 	function_Scan;;
	function_Create) 	function_Create;;
	*) 			function_Help; exit 1;;
esac
